module.exports = [ // layer 1

    /**
     * 
     * need to ensure params are formalized with registry
     * 
     * convert all language operators into functions
     * 
     * afterwards find all datastructures
     * 
     * a++ vs ++a needs to programmed
     * 
     * ALERT, check PHP logical operators compared to others .. precedence issue
     * ALERT, check RUBY logical operators compared to others .. expr value returned
     * 
     * notice how some operators support mixed datatypes
     * 
     */

    {

        name: "arithmetic addition", params: ["a","b"],


        javascript: "a + b",
        nodejs:     "a + b",
        python:     "a + b",
        php:        "a + b",
        ruby:       "a + b",
        perl:       "a + b",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "arithmetic subtraction", params: ["a","b"],


        javascript: "a - b",
        nodejs:     "a - b",
        python:     "a - b",
        php:        "a - b",
        ruby:       "a - b",
        perl:       "a - b",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "arithmetic multiplication", params: ["a","b"],


        javascript: "a * b",
        nodejs:     "a * b",
        python:     "a * b",
        php:        "a * b",
        ruby:       "a * b",
        perl:       "a * b",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:        "",
        c#:      "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "aritmetic division", params: ["a","b"],


        javascript: "a / b",
        nodejs:     "a / b",
        python:     "a / b",
        php:        "a / b",
        ruby:       "a / b",
        perl:       "a / b",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:        "",
        "c#":   "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "arithmetic expononentation", params: ["a","b"],


        javascript: "a ** b",
        nodejs:     "a ** b",
        python:     "a ** b",
        php:        "a ** b",
        ruby:       "a ** b",
        perl:       "a ** b",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:        "",
        "c#":   "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "arithmetic modulus", params: ["a","b"],


        javascript: "a % b",
        nodejs:     "a % b",
        python:     "a % b",
        php:        "a % b",
        ruby:       "a % b",
        perl:       "a % b",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "arithmetic pre increment", params: ["a"],


        javascript: "++a",
        nodejs:     "++a",
        python:     "a += 1",
        php:        "++a",
        ruby:       "a += 1",
        perl:       "++a",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "arithmetic pre decrement", params: ["a"],


        javascript: "--a",
        nodejs:     "--a",
        python:     "a -= 1",
        php:        "--a",
        ruby:       "a -= 1",
        perl:       "--a",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "arithemtic division floor", params: ["x","y"],


        javascript: "(x / y) >> 0",
        nodejs:     "(x / y) >> 0",
        python:     "x // y",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment", params: ["x","y"],


        javascript: "x = y",
        nodejs:     "x = y",
        python:     "x = y",
        php:        "x = y",
        ruby:       "x = y",
        perl:       "x = y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment addition", params: ["x","y"],


        javascript: "x += y",
        nodejs:     "x += y",
        python:     "x += y",
        php:        "x += y",
        ruby:       "x += y",
        perl:       "x += y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment subtraction", params: ["x","y"],


        javascript: "x -= y",
        nodejs:     "x -= y",
        python:     "x -= y",
        php:        "x -= y",
        ruby:       "x -= y",
        perl:       "x -= y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment multiplication", params: ["x","y"],


        javascript: "x *= y",
        nodejs:     "x *= y",
        python:     "x *= y",
        php:        "x *= y",
        ruby:       "x *= y",
        perl:       "x *= y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment division", params: ["x","y"],


        javascript: "x /= y",
        nodejs:     "x /= y",
        python:     "x /= y",
        php:        "x /= y",
        ruby:       "x /= y",
        perl:       "x /= y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment division floor", params: ["x","y"],


        javascript: "x = (x / (y >> 0))",
        nodejs:     "x = (x / (y >> 0))",
        python:     "x //= y",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment modulus", params: ["x","y"],


        javascript: "x %= y",
        nodejs:     "x %= y",
        python:     "x %= y",
        php:        "x %= y",
        ruby:       "x %= y",
        perl:       "x %= y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment exponentation", params: ["x","y"],


        javascript: "x **= y",
        nodejs:     "x **= y",
        python:     "x **= y",
        php:        "",
        ruby:       "x **= y",
        perl:       "x **= y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment AND", params: ["x","y"],


        javascript: "x &= y",
        nodejs:     "x &= y",
        python:     "x &= y",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment OR", params: ["x","y"],


        javascript: "x |= y",
        nodejs:     "x |= y",
        python:     "x |= y",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment XOR", params: ["x","y"],


        javascript: "x ^= y",
        nodejs:     "x ^=",
        python:     "x ^= y",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment right shift", params: ["x","y"],


        javascript: "x >>= y",
        nodejs:     "",
        python:     "x >>= y",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment left shift", params: ["x","y"],


        javascript: "x <<= y",
        nodejs:     "",
        python:     "x <<= y",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment parallel", params: [],

        description: `
        i.e: a, b, c = 10, 20, 30

        i.e: a, b = b, c
        `,

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison equal to", params: ["x","y"],


        javascript: "x == y",
        nodejs:     "x == y",
        python:     "",
        php:        "x == y",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison .eqls?", params: ["x","y"],

        description: "True if the receiver and argument have both the same type and equal values.	1 == 1.0 returns true, but 1.eql?(1.0) is false.",

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "x .eql? y",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison equalValueAndEqualType", params: ["x","y"],


        javascript: "x === y",
        nodejs:     "x === y",
        python:     "x == y",
        php:        "x === y",
        ruby:       "x == y",
        perl:       "x == y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison not equal to", params: ["x","y"],


        javascript: "x != y",
        nodejs:     "x != y",
        python:     "",
        php:        ["x != y","x <> y"],
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison not equal to value and type", params: ["x","y"],


        javascript: "x !== y",
        nodejs:     "x !== y",
        python:     "x != y",
        php:        "x !== y",
        ruby:       "x != y",
        perl:       "x != y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison greater than", params: ["x","y"],


        javascript: "x > y",
        nodejs:     "x > y",
        python:     "x > y",
        php:        "x > y",
        ruby:       "x > y",
        perl:       "x > y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison less than", params: ["x","y"],


        javascript: "x < y",
        nodejs:     "x < y",
        python:     "x < y",
        php:        "x < y",
        ruby:       "x < y",
        perl:       "x < y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison greater than equal to", params: ["x","y"],


        javascript: "x >= y",
        nodejs:     "x >= y",
        python:     "x >= y",
        php:        "x >= y",
        ruby:       "x >= y",
        perl:       "x >= y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison less than equal to", params: ["x","y"],


        javascript: "x <= y",
        nodejs:     "x <= y",
        python:     "x <= y",
        php:        "x <= y",
        ruby:       "x <= y",
        perl:       "x <= y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison spaceship", params: ["x","y"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "x <=> y",
        ruby:       "x <=> y",
        perl:       "x cmp y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison string less than", params: ["str0","str1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "str0 lt str1",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison string greater than", params: ["str0","str1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "str0 lt str1",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison string less than equals", params: ["str0","str1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "str0 le str1",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison string greater than equals", params: ["str0","str1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "str0 ge str1",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison string equals", params: ["str0","str1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "str0 eq str1",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison string not equals ", params: ["str0","str1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "str0 ne str1",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "comparison string spaceship", params: ["str0","str1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "str0 lt str1",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "identity is", params: ["x","y"],


        javascript: "",
        nodejs:     "",
        python:     "x is y",
        php:        "",
        ruby:       "x .equal? y",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "identity is not", params: ["x","y"],


        javascript: "",
        nodejs:     "",
        python:     "x is not y",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "ternary", params: ["condition","exprIfTrue","exprIfFalse"],


        javascript: "condition ? exprIfTrue : exprIfFalse",
        nodejs:     "",
        python:     "exprIfTrue if condition else exprIfTrue",
        php:        "condition ? exprIfTrue : exprIfFalse",
        ruby:       "condition ? exprIfTrue : exprIfFalse",
        perl:       "condition ? exprIfTrue : exprIfFalse",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "coalescing null", params: ["expr","expr1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "expr0 ?? expr1",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "membership", params: ["value","array"],


        javascript: "array.includes(value)",
        nodejs:     "",
        python:     "value in array",
        php:        "", // (1..10) === 5
        ruby:       "array.include? value",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "membership not in", params: ["value","array"],


        javascript: "!(array.includes(value))",
        nodejs:     "",
        python:     "value not in array",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "logical and", params: ["x","y"],


        javascript: "x && y",
        nodejs:     "",
        python:     "x and y",
        php:        ["y and x","x && y"],
        ruby:       ["x and y","x && y"],
        perl:       ["x and y","x && y"],
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "logical or", params: ["x","y"],


        javascript: "x || y",
        nodejs:     "x || y",
        python:     "x or y",
        php:        ["y or x","x or y"],
        ruby:       ["x or y","x || y"],
        perl:       ["x or y","x || y"],
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "logical not", params: ["x"],


        javascript: "! x",
        nodejs:     "! x",
        python:     "not( x )",
        php:        "! x",
        ruby:       ["! ( x )","not( x )"],
        perl:       "not ( x )",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "type typeof", params: ["value"],


        javascript: "typeof value",
        nodejs:     "typeof value",
        python:     "type( value )",
        php:        "gettype ( value )",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "type instanceof", params: ["child","parent"],


        javascript: "child instanceof parent",
        nodejs:     "child instanceof parent",
        python:     "isinstance( child , parent  )",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "bitwise AND", params: ["x","y"],


        javascript: "x & y",
        nodejs:     "x & y",
        python:     "x & y",
        php:        "x & y",
        ruby:       "x & y",
        perl:       "x & y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "bitwise OR", params: ["x","y"],


        javascript: "x | y",
        nodejs:     "x | y",
        python:     "x | y",
        php:        "x | y",
        ruby:       "x | y",
        perl:       "x | y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "bitwise XOR", params: ["x","y"],


        javascript: "x ^ y",
        nodejs:     "x ^ y",
        python:     "x ^ y",
        php:        "x ^ y",
        ruby:       "x ^ y",
        perl:       "x ^ y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "bitwise NOT", params: ["x"],


        javascript: "~ x",
        nodejs:     "~ x",
        python:     "~ x",
        php:        "~ x",
        ruby:       "~ x",
        perl:       "~ x",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "bitwise Zero fill left shift", params: ["x","y"],


        javascript: "x << y",
        nodejs:     "x << y",
        python:     "x << y",
        php:        "x << y",
        ruby:       "x << y",
        perl:       "x << y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "bitwise signed right shift", params: ["x","y"],


        javascript: "x >> y",
        nodejs:     "x >> y",
        python:     "x >> y",
        php:        "x >> y",
        ruby:       "x >> y",
        perl:       "x >> y",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "bitwise zero fill right shift", params: ["x","y"],


        javascript: "x >>> y",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "string concatenation", params: ["str0","str1"],


        javascript: "str0 + str0",
        nodejs:     "str0 + str1",
        python:     "str0 + str1",
        php:        "str0 . str1",
        ruby:       "str0 + str1",
        perl:       "str0 . str1",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "assignment string concatenation", params: ["str0","str1"],


        javascript: "str0 += str0",
        nodejs:     "str0 += str1",
        python:     "str0 = str0 + str1",
        php:        "str0 .= str1",
        ruby:       "str0 += str1",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "string repetition", params: ["str","reps"],

        javascript: "string.repeat(reps)",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "",
        perl:       "str x reps",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "array union", params: ["arr0","arr1"],


        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "arr0 + arr1",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "array equality", params: ["arr0","arr1"],

        description: "Returns true if $x and $y have the same key/value pairs",

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "arr0 == arr1",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "array identity", params: ["arr0","arr1"],

        description: "Returns true if $x and $y have the same key/value pairs in the same order and of the same types",

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "arr0 === arr1",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "array inequality", params: ["arr0","arr1"],

        description: "Returns true if $x is not equal to $y",

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        ["arr0 != arr1","arr0 <> arr1"],
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "array not identity", params: ["arr0","arr1"],

        description: "Returns true if $x is not identical to $y",

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "arr0 != arr1",
        ruby:       "",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "range inclusive", params: ["start","finish"],

        description: `
        Creates a range from start point to end point inclusive.	
        1..10 Creates a range from 1 to 10 inclusive.
        `,

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "start .. finish",
        perl:       "start .. finish",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "range exclusive", params: ["start","finish"],

        description: `
        Creates a range from start point to end point inclusive.	
        1..10 Creates a range from 1 to 9 inclusive.
        `,

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "start ... finish",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    {

        name: "defined", params: ["variable"],

        description: `
        Ruby defined? Operators
        defined? is a special operator that takes the form of a method call to determine whether or not the passed expression is defined. It returns a description string of the expression, or nil if the expression isn't defined.

        There are various usage of defined? Operator

        Usage 1
        defined? variable # True if variable is initialized
        For Example

        foo = 42
        defined? foo    # => "local-variable"
        defined? $_     # => "global-variable"
        defined? bar    # => nil (undefined)
        `,

        javascript: "",
        nodejs:     "",
        python:     "",
        php:        "",
        ruby:       "defined? variable",
        perl:       "",
        lua:        "",
        r:          "",
        lisp:       "",
        kotlin:     "",
        swift:      "",
        go:         "",
        java:       "",
        cpp:        "",
        c:          "",
        "c#":       "",
        rust:       "",
        fortran:    "",
        x86:        "",
        arm32:      "",
        arm64:      "",
        wasm:       ""
    },
    


]

